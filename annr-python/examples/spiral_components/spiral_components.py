import sys
sys.path.append('../../')

from pyannr.function import ImageFunctionBinary
from pyannr.interpolator import DelaunayInterpolatorBoundaryIntersect as ANNR,\
                                PartitioningInterpolator as DEFER

### Load function as 2D image
function = ImageFunctionBinary('spiral.png')

### Default domain of an image-loaded function is [0, H-1] x [0, W-1]
domain = function.default_domain()

interpolators = [
#    ('DEFER', DEFER(function, domain)),
#    ('ANNR', ANNR(function, domain)),
#    ('ANNR', ANNR(function, domain)),
#    ('ANNR', ANNR(function, domain)),
]

### Setting up evaluation points and ground truth data for faster evaluation
import numpy as np
test_set = domain.grid(100)
test_values = np.array([function(x) for x in test_set])

### Special type of score function -- number of connected components
from scipy.ndimage.measurements import label
connection = np.ones((3, 3), dtype=np.int)
NCC = lambda x, yhat: label(np.reshape(np.array(yhat, dtype=np.int), (100, 100)),
                            connection)[1]


scores = []
for name, interpolator in interpolators:
        score = interpolator.run(1000, evaluate=True, evaluation_frequency=20,
                                 evaluation_set=test_set, evaluation_metrics=[NCC])
        print(score)
        scores.append((score, name))

### Save score graphs

scores = [
    ([[5, [0]], [31, [5]], [55, [6]], [79, [7]], [103, [9]], [125, [11]], [145, [12]], [165, [13]], [185, [15]], [209, [15]], [233, [15]], [257, [14]], [281, [15]], [305, [14]], [329, [13]], [353, [11]], [377, [12]], [401, [11]], [425, [10]], [449, [9]], [473, [9]], [497, [9]], [517, [7]], [537, [6]], [561, [5]], [585, [4]], [609, [4]], [633, [4]], [657, [2]], [681, [2]], [705, [2]], [729, [2]], [753, [2]], [777, [1]], [801, [1]], [825, [1]], [849, [1]], [873, [1]], [897, [1]], [921, [1]], [945, [1]], [969, [1]], [993, [1]], [1005, [1]]], 'DEFER'),
    ([[14, [1]], [20, [2]], [40, [5]], [60, [8]], [80, [6]], [100, [7]], [120, [9]], [140, [11]], [160, [13]], [180, [10]], [200, [10]], [220, [9]], [240, [8]], [260, [7]], [280, [7]], [300, [7]], [320, [6]], [340, [7]], [360, [6]], [380, [6]], [400, [6]], [420, [6]], [440, [5]], [460, [4]], [480, [4]], [500, [4]], [520, [2]], [540, [2]], [560, [2]], [580, [2]], [600, [1]], [620, [1]], [640, [1]], [660, [1]], [680, [1]], [700, [1]], [720, [1]], [740, [1]], [760, [1]], [780, [1]], [800, [1]], [820, [1]], [840, [1]], [860, [1]], [880, [1]], [900, [1]], [920, [1]], [940, [1]], [960, [1]], [980, [1]], [999, [1]]], 'ANNR'),
    ([[14, [2]], [20, [1]], [40, [2]], [60, [4]], [80, [5]], [100, [7]], [120, [13]], [140, [15]], [160, [17]], [180, [19]], [200, [18]], [220, [13]], [240, [13]], [260, [12]], [280, [9]], [300, [7]], [320, [6]], [340, [4]], [360, [4]], [380, [4]], [400, [4]], [420, [2]], [440, [2]], [460, [2]], [480, [1]], [500, [1]], [520, [1]], [540, [1]], [560, [1]], [580, [1]], [600, [1]], [620, [1]], [640, [1]], [660, [1]], [680, [1]], [700, [1]], [720, [1]], [740, [1]], [760, [1]], [780, [1]], [800, [1]], [820, [1]], [840, [1]], [860, [1]], [880, [1]], [900, [1]], [920, [1]], [940, [1]], [960, [1]], [980, [1]], [999, [1]]], 'ANNR'),
    ([[14, [1]], [20, [2]], [40, [3]], [60, [4]], [80, [10]], [100, [8]], [120, [12]], [140, [13]], [160, [14]], [180, [15]], [200, [13]], [220, [12]], [240, [11]], [260, [10]], [280, [10]], [300, [9]], [320, [6]], [340, [5]], [360, [5]], [380, [2]], [400, [2]], [420, [2]], [440, [1]], [460, [1]], [480, [1]], [500, [1]], [520, [1]], [540, [1]], [560, [1]], [580, [1]], [600, [1]], [620, [1]], [640, [1]], [660, [1]], [680, [1]], [700, [1]], [720, [1]], [740, [1]], [760, [1]], [780, [1]], [800, [1]], [820, [1]], [840, [1]], [860, [1]], [880, [1]], [900, [1]], [920, [1]], [940, [1]], [960, [1]], [980, [1]], [999, [1]]], 'ANNR'),
    ([[14, [2]], [20, [4]], [40, [6]], [60, [5]], [80, [11]], [100, [11]], [120, [13]], [140, [13]], [160, [12]], [180, [12]], [200, [13]], [220, [13]], [240, [11]], [260, [8]], [280, [7]], [300, [6]], [320, [7]], [340, [7]], [360, [7]], [380, [5]], [400, [5]], [420, [5]], [440, [5]], [460, [3]], [480, [3]], [500, [2]], [520, [2]], [540, [2]], [560, [2]], [580, [2]], [600, [2]], [620, [1]], [640, [1]], [660, [1]], [680, [1]], [700, [1]], [720, [1]], [740, [1]], [760, [1]], [780, [1]], [800, [1]], [820, [1]], [840, [1]], [860, [1]], [880, [1]], [900, [1]], [920, [1]], [940, [1]], [960, [1]], [980, [1]], [999, [1]]], 'ANNR'),
    ([[14, [1]], [20, [2]], [40, [4]], [60, [6]], [80, [7]], [100, [8]], [120, [14]], [140, [14]], [160, [17]], [180, [19]], [200, [14]], [220, [12]], [240, [10]], [260, [9]], [280, [8]], [300, [8]], [320, [7]], [340, [4]], [360, [4]], [380, [3]], [400, [2]], [420, [2]], [440, [2]], [460, [2]], [480, [2]], [500, [1]], [520, [1]], [540, [1]], [560, [1]], [580, [1]], [600, [1]], [620, [1]], [640, [1]], [660, [1]], [680, [1]], [700, [1]], [720, [1]], [740, [1]], [760, [1]], [780, [1]], [800, [1]], [820, [1]], [840, [1]], [860, [1]], [880, [1]], [900, [1]], [920, [1]], [940, [1]], [960, [1]], [980, [1]], [999, [1]]], 'ANNR'),
]

from pyannr.utils import save_score_plot
save_score_plot(scores,
                filename=f'{function.name}_ncc_scores.png',
                title=f'Number of connected components',
                metric_names=[''], skip_first=1,
                tex=True, log_scale=False)
